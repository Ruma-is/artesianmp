'use client'


import { useCart } from '@/contexts/CartContext'
import { useAuth } from '@/lib/supabase/auth-context'
import { createClient } from '@/lib/supabase/client'
import { useState } from 'react'
import { useRouter } from 'next/navigation'
import Link from 'next/link'


export default function CheckoutPage() {
Â  const { items, totalPrice, clearCart } = useCart()
Â  const { user, loading } = useAuth()
Â  const router = useRouter()
Â  const supabase = createClient()


Â  const [formLoading, setFormLoading] = useState(false)
Â  const [formData, setFormData] = useState({
Â  Â  fullName: '',
Â  Â  address: '',
Â  Â  pincode: ''
Â  })


Â  // Show loading while auth is being checked
Â  if (loading) {
Â  Â  return (
Â  Â  Â  <div className="min-h-screen bg-white flex items-center justify-center">
Â  Â  Â  Â  <div className="text-center">
Â  Â  Â  Â  Â  <p className="text-2xl">Loading...</p>
Â  Â  Â  Â  </div>
Â  Â  Â  </div>
Â  Â  )
Â  }


Â  // Redirect to login if not authenticated
Â  if (!user) {
Â  Â  router.push('/auth/login?redirect=/checkout')
Â  Â  return null
Â  }


Â  if (items.length === 0) {
Â  Â  return (
Â  Â  Â  <div className="min-h-screen bg-white flex items-center justify-center">
Â  Â  Â  Â  <div className="text-center">
Â  Â  Â  Â  Â  <p className="text-6xl mb-4">ðŸ›’</p>
Â  Â  Â  Â  Â  <h2 className="text-2xl font-bold mb-2">Your cart is empty</h2>
Â  Â  Â  Â  Â  <Link href="/products" className="text-orange-600 hover:text-orange-700 underline">
Â  Â  Â  Â  Â  Â  Browse Products
Â  Â  Â  Â  Â  </Link>
Â  Â  Â  Â  </div>
Â  Â  Â  </div>
Â  Â  )
Â  }


  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()


    setFormLoading(true)


    try {
      const orderNumber = `ORD-${Date.now()}-${Math.random().toString(36).substr(2, 9).toUpperCase()}`
      
      console.log('Creating order for user:', user.id)
      
      const { data, error } = await supabase
        .from('orders')
        .insert({
          buyer_id: user.id,
          order_number: orderNumber,
          total_amount: totalPrice + 50,
          status: 'pending',
          payment_method: 'upi',
          shipping_address: formData
        })
        .select()
        .single()


      if (error) {
        console.error('Order creation error:', error)
        alert(`Database Error: ${error.message}\nCode: ${error.code}\nDetails: ${error.details || 'None'}`)
        throw error
      }


      console.log('Order created successfully:', data.id)


      // Insert order items
      const orderItems = items.map(item => ({
        order_id: data.id,
        product_id: item.id,
        quantity: item.quantity,
        unit_price: item.price,
        total_price: item.price * item.quantity
      }))


      console.log('Inserting order items:', orderItems)


      const { error: itemsError } = await supabase
        .from('order_items')
        .insert(orderItems)
        
      if (itemsError) {
        console.error('Order items error:', itemsError)
        alert(`Order Items Error: ${itemsError.message}\nCode: ${itemsError.code}`)
        throw itemsError
      }


      console.log('Order items inserted successfully')


      const totalAmount = totalPrice + 50
Â  Â  Â  const upiId = 'rumurumi72@okhdfcbank'
Â  Â  Â  const merchantName = 'Artisan Marketplace'
Â  Â  Â  const orderId = data.id.substring(0, 8)
Â  Â  Â  
Â  Â  Â  const upiLink = `upi://pay?pa=${upiId}&pn=${encodeURIComponent(merchantName)}&am=${totalAmount}&cu=INR&tn=Order%20${orderId}`
Â  Â  Â  
Â  Â  Â  window.location.href = upiLink
Â  Â  Â  
Â  Â  Â  setTimeout(() => {
Â  Â  Â  Â  clearCart()
Â  Â  Â  Â  router.push(`/orders/${data.id}`)
Â  Â  Â  }, 2000)


Â  Â  } catch (error) {
Â  Â  Â  console.error('Order failed:', error)
Â  Â  Â  alert('Failed to create order. Please try again.')
Â  Â  } finally {
Â  Â  Â  setFormLoading(false)
Â  Â  }
Â  }


Â  return (
Â  Â  <div className="min-h-screen bg-gray-50 py-8">
Â  Â  Â  <div className="max-w-7xl mx-auto px-4">
Â  Â  Â  Â  <h1 className="text-3xl font-bold mb-8">Checkout</h1>


Â  Â  Â  Â  <div className="grid lg:grid-cols-3 gap-8">
Â  Â  Â  Â  Â  <div className="lg:col-span-2">
Â  Â  Â  Â  Â  Â  <div className="bg-white p-6 rounded-lg shadow">
Â  Â  Â  Â  Â  Â  Â  <h2 className="text-xl font-bold mb-4">Shipping Information</h2>
Â  Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  Â  <form onSubmit={handleSubmit} className="space-y-4">
Â  Â  Â  Â  Â  Â  Â  Â  <div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  <label className="block text-sm font-medium mb-1">Full Name *</label>
Â  Â  Â  Â  Â  Â  Â  Â  Â  <input
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  type="text"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  required
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  value={formData.fullName}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onChange={(e) => setFormData({...formData, fullName: e.target.value})}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  className="w-full px-4 py-2 border rounded-lg focus:ring-2 focus:ring-orange-500"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  placeholder="Enter your full name"
Â  Â  Â  Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  Â  Â  Â  </div>


Â  Â  Â  Â  Â  Â  Â  Â  <div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  <label className="block text-sm font-medium mb-1">Delivery Address *</label>
Â  Â  Â  Â  Â  Â  Â  Â  Â  <textarea
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  required
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  value={formData.address}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onChange={(e) => setFormData({...formData, address: e.target.value})}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  rows={3}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  className="w-full px-4 py-2 border rounded-lg focus:ring-2 focus:ring-orange-500"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  placeholder="House no, Street, City, State"
Â  Â  Â  Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  Â  Â  Â  </div>


Â  Â  Â  Â  Â  Â  Â  Â  <div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  <label className="block text-sm font-medium mb-1">Pincode *</label>
Â  Â  Â  Â  Â  Â  Â  Â  Â  <input
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  type="text"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  required
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  pattern="[0-9]{6}"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  maxLength={6}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  value={formData.pincode}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onChange={(e) => setFormData({...formData, pincode: e.target.value})}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  className="w-full px-4 py-2 border rounded-lg focus:ring-2 focus:ring-orange-500"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  placeholder="Enter 6-digit pincode"
Â  Â  Â  Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  Â  Â  Â  </div>


Â  Â  Â  Â  Â  Â  Â  Â  <div className="pt-4 border-t">
Â  Â  Â  Â  Â  Â  Â  Â  Â  <h3 className="font-bold mb-3">Payment Method</h3>
Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="p-4 border-2 border-orange-500 rounded-lg bg-orange-50">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <label className="flex items-center justify-between">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="flex items-center">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <input type="radio" checked readOnly className="mr-3 w-5 h-5" />
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <p className="font-semibold text-lg">UPI Payment</p>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <p className="text-sm text-gray-600">Google Pay, PhonePe, Paytm</p>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <span className="text-4xl">ðŸ“±</span>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </label>
Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  </div>


Â  Â  Â  Â  Â  Â  Â  Â  <button
Â  Â  Â  Â  Â  Â  Â  Â  Â  type="submit"
Â  Â  Â  Â  Â  Â  Â  Â  Â  disabled={formLoading}
Â  Â  Â  Â  Â  Â  Â  Â  Â  className="w-full bg-orange-600 text-white py-3 rounded-lg hover:bg-orange-700 font-semibold disabled:opacity-50 mt-6"
Â  Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  Â  {formLoading ? 'Processing...' : 'Pay with UPI'}
Â  Â  Â  Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  Â  Â  Â  </form>
Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  </div>


Â  Â  Â  Â  Â  <div className="lg:col-span-1">
Â  Â  Â  Â  Â  Â  <div className="bg-white p-6 rounded-lg shadow sticky top-24">
Â  Â  Â  Â  Â  Â  Â  <h2 className="text-xl font-bold mb-4">Order Summary</h2>
Â  Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  Â  <div className="space-y-3 mb-4 pb-4 border-b">
Â  Â  Â  Â  Â  Â  Â  Â  {items.map(item => (
Â  Â  Â  Â  Â  Â  Â  Â  Â  <div key={item.id} className="flex justify-between text-sm">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <span>{item.title} Ã— {item.quantity}</span>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <span className="font-semibold">â‚¹{item.price * item.quantity}</span>
Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  ))}
Â  Â  Â  Â  Â  Â  Â  </div>


Â  Â  Â  Â  Â  Â  Â  <div className="space-y-2 mb-4 pb-4 border-b">
Â  Â  Â  Â  Â  Â  Â  Â  <div className="flex justify-between">
Â  Â  Â  Â  Â  Â  Â  Â  Â  <span>Subtotal</span>
Â  Â  Â  Â  Â  Â  Â  Â  Â  <span className="font-semibold">â‚¹{totalPrice}</span>
Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  <div className="flex justify-between">
Â  Â  Â  Â  Â  Â  Â  Â  Â  <span>Shipping</span>
Â  Â  Â  Â  Â  Â  Â  Â  Â  <span className="font-semibold text-green-600">â‚¹50</span>
Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  </div>


Â  Â  Â  Â  Â  Â  Â  <div className="flex justify-between font-bold text-lg">
Â  Â  Â  Â  Â  Â  Â  Â  <span>Total</span>
Â  Â  Â  Â  Â  Â  Â  Â  <span className="text-orange-600">â‚¹{totalPrice + 50}</span>
Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  </div>
Â  Â  Â  </div>
Â  Â  </div>
Â  )
} 